<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MomentSharp</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:MomentSharp.Display">
            <summary>
            Contains functions for formatting and displaying of DateTime objects
            </summary>
        </member>
        <member name="M:MomentSharp.Display.From(MomentSharp.Moment,System.DateTime,System.Boolean)">
            <summary>
                moment([2007, 0, 29]).fromNow();     // 4 years ago
                moment([2007, 0, 29]).fromNow(showSuffix: false); // 4 years
                Emulates http://momentjs.com/docs/#/displaying/fromnow/
            </summary>
            <param name="moment"><see cref="T:MomentSharp.Moment"/></param>
            <param name="dateTime">Uses DateTime.UtcNow if not provided</param>
            <param name="showSuffix">Shows "number part ago" or "in number part"</param>
            <returns>Localized string e.g. 4 years ago</returns>
        </member>
        <member name="M:MomentSharp.Display.Calendar(MomentSharp.Moment,System.DateTime)">
            <summary>
                Will format a date with different strings depending on how close to referenceTime's date (today by default) the
                date is.
                Emulates: http://momentjs.com/docs/#/displaying/calendar-time/
            </summary>
            <param name="moment"><see cref="T:MomentSharp.Moment"/></param>
            <param name="dateTime">Uses DateTime.UtcNow if not provided</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:MomentSharp.Display.Calendar(MomentSharp.Moment,MomentSharp.Moment)">
            <summary>
                Will format a date with different strings depending on how close to referenceTime's date (today by default) the
                date is.
                Emulates: http://momentjs.com/docs/#/displaying/calendar-time/
            </summary>
            <param name="moment"><see cref="T:MomentSharp.Moment"/></param>
            <param name="compareMoment">Uses DateTime.UtcNow if not provided</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:MomentSharp.Display.UnixTimeStamp(System.DateTime,System.String)">
            <summary>
                Returns the number of seconds since the Unix Epoch
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="timeZoneId">Defaults to UTC if not provided. For valid parameters see TimeZoneInfo.GetSystemTimeZones()</param>
            <returns>number of seconds since the Unix Epoch</returns>
        </member>
        <member name="M:MomentSharp.Display.DaysInMonth(System.DateTime)">
            <summary>
                Get the number of days in this <paramref name="dateTime" />.
            </summary>
            <param name="dateTime">this DateTime</param>
            <returns>number of days in the month</returns>
        </member>
        <member name="M:MomentSharp.Display.DaysInMonth(MomentSharp.Moment)">
            <summary>
                Get the number of days in this <paramref name="moment" />.
            </summary>
            <param name="moment"><see cref="T:MomentSharp.Moment"/></param>
            <returns>number of days in the month</returns>
        </member>
        <member name="T:MomentSharp.Globalization.Calendar">
            <summary>
                Calendar parts.
                Meant to emulate http://momentjs.com/docs/#/displaying/calendar-time/
            </summary>
        </member>
        <member name="F:MomentSharp.Globalization.Calendar.SameDay">
            <summary>
            Text to display if both dates are on the same day, e.g. Today
            </summary>
        </member>
        <member name="F:MomentSharp.Globalization.Calendar.NextDay">
            <summary>
            Text to display if orginal date is tomorrow compared to referenceTime
            </summary>
        </member>
        <member name="F:MomentSharp.Globalization.Calendar.NextWeek">
            <summary>
            Text to display if orginal date is tomorrow compared to referenceTime
            </summary>
        </member>
        <member name="F:MomentSharp.Globalization.Calendar.LastDay">
            <summary>
            Text to display if orginal date is next week compared to referenceTime
            </summary>
        </member>
        <member name="F:MomentSharp.Globalization.Calendar.LastWeek">
            <summary>
            Text to display if orginal date is yesterday compared to referenceTime
            </summary>
        </member>
        <member name="F:MomentSharp.Globalization.Calendar.SameElse">
            <summary>
            Text to display if orginal date is last week compared to referenceTime
            </summary>
        </member>
        <member name="T:MomentSharp.Globalization.Languages.De">
            <summary>
            Localization for German (De)
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.De.#ctor">
            <summary>
            German locazation implementation constructor
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.Languages.De.LongDateFormat">
            <summary>
            Localized short hand format strings. See http://momentjs.com/docs/#localized-formats
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.De.Translate(MomentSharp.Globalization.Calendar,System.DateTime)">
            <summary>
            Localized <see cref="T:MomentSharp.Globalization.Calendar"/> parts for <paramref name="dateTime"/>
            </summary>
            <param name="calendar">Calendar Part</param>
            <param name="dateTime">DateTime to use in format string</param>
            <returns>Localized string e.g. Today at 9:00am</returns>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.De.Translate(MomentSharp.Globalization.RelativeTime,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Localize <see cref="T:MomentSharp.Globalization.RelativeTime"/>. This is meant to emulate how MomentJs allows localization of RelativeTime
            </summary>
            <param name="relativeTime"><see cref="T:MomentSharp.Globalization.RelativeTime"/></param>
            <param name="number">Difference amount</param>
            <param name="showSuffix">Should suffix? e.g. "ago"</param>
            <param name="isFuture">Difference is in the future or not. e.g. Yesterday vs Tomorrow</param>
            <returns>Localized realtive time e.g.: 5 seconds ago</returns>
        </member>
        <member name="T:MomentSharp.Globalization.Languages.EnUs">
            <summary>
             Localization for English (US,American) (En-US)
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.EnUs.#ctor">
            <summary>
            English locazation implementation constructor
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.Languages.EnUs.LongDateFormat">
            <summary>
            Localized short hand format strings. See http://momentjs.com/docs/#localized-formats
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.EnUs.Translate(MomentSharp.Globalization.Calendar,System.DateTime)">
            <summary>
            Localized <see cref="T:MomentSharp.Globalization.Calendar"/> parts for <paramref name="dateTime"/>
            </summary>
            <param name="calendar">Calendar Part</param>
            <param name="dateTime">DateTime to use in format string</param>
            <returns>Localized string e.g. Today at 9:00am</returns>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.EnUs.Translate(MomentSharp.Globalization.RelativeTime,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Localize <see cref="T:MomentSharp.Globalization.RelativeTime"/>. This is meant to emulate how MomentJs allows localization of RelativeTime
            </summary>
            <param name="relativeTime"><see cref="T:MomentSharp.Globalization.RelativeTime"/></param>
            <param name="number">Difference amount</param>
            <param name="showSuffix">Should suffix? e.g. "ago"</param>
            <param name="isFuture">Difference is in the future or not. e.g. Yesterday vs Tomorrow</param>
            <returns>Localized realtive time e.g.: 5 seconds ago</returns>
        </member>
        <member name="T:MomentSharp.Globalization.Languages.ZhCn">
            <summary>
             Localization for Chinese (Zh-Cn)
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.ZhCn.#ctor">
            <summary>
            Chinese locazation implementation constructor
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.Languages.ZhCn.LongDateFormat">
            <summary>
            Localized short hand format strings. See http://momentjs.com/docs/#localized-formats
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.ZhCn.Translate(MomentSharp.Globalization.Calendar,System.DateTime)">
            <summary>
            Localized <see cref="T:MomentSharp.Globalization.Calendar"/> parts for <paramref name="dateTime"/>
            </summary>
            <param name="calendar">Calendar Part</param>
            <param name="dateTime">DateTime to use in format string</param>
            <returns>Localized string e.g. Today at 9:00am</returns>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.ZhCn.Translate(MomentSharp.Globalization.RelativeTime,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Localize <see cref="T:MomentSharp.Globalization.RelativeTime"/>. This is meant to emulate how MomentJs allows localization of RelativeTime
            </summary>
            <param name="relativeTime"><see cref="T:MomentSharp.Globalization.RelativeTime"/></param>
            <param name="number">Difference amount</param>
            <param name="showSuffix">Should suffix? e.g. "ago"</param>
            <param name="isFuture">Difference is in the future or not. e.g. Yesterday vs Tomorrow</param>
            <returns>Localized realtive time e.g.: 5 seconds ago</returns>
        </member>
        <member name="T:MomentSharp.Globalization.Languages.ZhTw">
            <summary>
             Localization for traditional chinese (Zh-Tw)
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.ZhTw.#ctor">
            <summary>
            Chinese locazation implementation constructor
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.Languages.ZhTw.LongDateFormat">
            <summary>
            Localized short hand format strings. See http://momentjs.com/docs/#localized-formats
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.ZhTw.Translate(MomentSharp.Globalization.Calendar,System.DateTime)">
            <summary>
            Localized <see cref="T:MomentSharp.Globalization.Calendar"/> parts for <paramref name="dateTime"/>
            </summary>
            <param name="calendar">Calendar Part</param>
            <param name="dateTime">DateTime to use in format string</param>
            <returns>Localized string e.g. Today at 9:00am</returns>
        </member>
        <member name="M:MomentSharp.Globalization.Languages.ZhTw.Translate(MomentSharp.Globalization.RelativeTime,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Localize <see cref="T:MomentSharp.Globalization.RelativeTime"/>. This is meant to emulate how MomentJs allows localization of RelativeTime
            </summary>
            <param name="relativeTime"><see cref="T:MomentSharp.Globalization.RelativeTime"/></param>
            <param name="number">Difference amount</param>
            <param name="showSuffix">Should suffix? e.g. "ago"</param>
            <param name="isFuture">Difference is in the future or not. e.g. Yesterday vs Tomorrow</param>
            <returns>Localized realtive time e.g.: 5 seconds ago</returns>
        </member>
        <member name="T:MomentSharp.Globalization.Languages.NamespaceDoc">
            <summary>
            <see cref="N:MomentSharp.Globalization.Languages"/> contains implementations of <see cref="N:MomentSharp.Globalization"/>
            </summary>
        </member>
        <member name="T:MomentSharp.Globalization.ILocalize">
            <summary>
                Base class for implementing language translations.
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.ILocalize.LongDateFormat">
            <summary>
            Localized short hand format strings. See http://momentjs.com/docs/#localized-formats
            </summary>
        </member>
        <member name="M:MomentSharp.Globalization.ILocalize.Translate(MomentSharp.Globalization.Calendar,System.DateTime)">
            <summary>
            Localized <see cref="T:MomentSharp.Globalization.Calendar"/> parts for <paramref name="dateTime"/>
            </summary>
            <param name="calendar">Calendar Part</param>
            <param name="dateTime">DateTime to use in format string</param>
            <returns>Localized string e.g. Today at 9:00am</returns>
        </member>
        <member name="M:MomentSharp.Globalization.ILocalize.Translate(MomentSharp.Globalization.RelativeTime,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Localize <see cref="T:MomentSharp.Globalization.RelativeTime"/>. This is meant to emulate how MomentJs allows localization of RelativeTime
            </summary>
            <param name="relativeTime"><see cref="T:MomentSharp.Globalization.RelativeTime"/></param>
            <param name="number">Difference amount</param>
            <param name="showSuffix">Should suffix? e.g. "ago"</param>
            <param name="isFuture">Difference is in the future or not. e.g. Yesterday vs Tomorrow</param>
            <returns>Localized realtive time e.g.: 5 seconds ago</returns>
        </member>
        <member name="T:MomentSharp.Globalization.LongDateFormat">
            <summary>
                Extra for formats from Momentjs. Some of these are may already exist in DateTime.ToString(*) See http://momentjs.com/docs/#localized-formats
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.Lt">
            <summary>
            Time: 8:30 PM
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.Lts">
            <summary>
            Time with seconds: 8:30:25 PM
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.L">
            <summary>
            Month numeral, day of month, year: 09/04/1986
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.l">
            <summary>
            Month numeral, day of month, year: 9/4/1986
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.LL">
            <summary>
            Month name, day of month, year:	September 4 1986
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.ll">
            <summary>
            Month name, day of month, year:	Sep 4 1986
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.LLL">
            <summary>
            Month name, day of month, year, time: September 4 1986 8:30 PM
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.lll">
            <summary>
            Month name, day of month, year, time: Sep 4 1986 8:30 PM
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.LLLL">
            <summary>
            Month name, day of month, day of week, year, time: Thursday, September 4 1986 8:30 PM
            </summary>
        </member>
        <member name="P:MomentSharp.Globalization.LongDateFormat.llll">
            <summary>
            Month name, day of month, day of week, year, time: Thu, Sep 4 1986 8:30 PM
            </summary>
        </member>
        <member name="T:MomentSharp.Globalization.RelativeTime">
            <summary>
                Relative Time parts
                Meant to emulate: http://momentjs.com/docs/#/displaying/fromnow/
            </summary>
        </member>
        <member name="T:MomentSharp.Globalization.NamespaceDoc">
            <summary>
            <see cref="N:MomentSharp.Globalization"/> contains the interface to create a localization <see cref="N:MomentSharp.Globalization.Languages"/>
            </summary>
        </member>
        <member name="T:MomentSharp.Moment">
            <summary>
            Moment object which provides support for several DateTime functions that are not built-in to C#
            </summary>
        </member>
        <member name="M:MomentSharp.Moment.#ctor(System.Boolean)">
            <summary>
                Get's a new Moment defaulting values to DateTime.UtcNow, unless <paramref name="zero" /> is true in which values
                will be set to the min value
            </summary>
            <param name="zero">use min values instead of UtcNow</param>
        </member>
        <member name="P:MomentSharp.Moment.Year">
            <summary>
            Date's Year
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Month">
            <summary>
            Date's Month
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Day">
            <summary>
            Date's Day
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Hour">
            <summary>
            Date's Hour
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Minute">
            <summary>
            Date's Minute
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Second">
            <summary>
            Date's Second
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Millisecond">
            <summary>
            Date's Millisecond
            </summary>
        </member>
        <member name="P:MomentSharp.Moment.Language">
            <summary>
            Local/Language to use
            </summary>
        </member>
        <member name="M:MomentSharp.Moment.SetLanguageByCulture">
            <summary>
            Attempts to find the correct <see cref="T:MomentSharp.Globalization.ILocalize"/> based on the <see cref="P:System.Threading.Thread.CurrentThread"/> CurrentCulture
            </summary>
            <returns>ILocalize</returns>
        </member>
        <member name="T:MomentSharp.DateTimeParts">
            <summary>
                Used to identify a time part like <see cref="M:MomentSharp.Manipulate.EndOf(System.DateTime,MomentSharp.DateTimeParts)" />
            </summary>
        </member>
        <member name="F:MomentSharp.DateTimeParts.None">
            <summary>
                Do NOT use in your code. This is meant to be used in default parameters
            </summary>
        </member>
        <member name="T:MomentSharp.Manipulate">
            <summary>
            Emulating http://momentjs.com/docs/#/manipulating/
            </summary>
        </member>
        <member name="M:MomentSharp.Manipulate.StartOf(MomentSharp.DateTimeParts)">
            <summary>
                Get the start of <paramref name="part" /> from DateTime.UtcNow. E.g. StartOf(DateTimeParts.Year)
                return a new <see cref="T:System.DateTime" /> at the start of the current year.
            </summary>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>DateTime at the start of give <paramref name="part"/></returns>
        </member>
        <member name="M:MomentSharp.Manipulate.StartOf(System.DateTime,MomentSharp.DateTimeParts)">
            <summary>
                Get the start of this <paramref name="dateTime" /> at <paramref name="part" />. E.g.
                DateTime.Now.StartOf(DateTimeParts.Year)
                return a new <see cref="T:System.DateTime" /> at the start of the current year.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>DateTime at the start of give <paramref name="part"/></returns>
        </member>
        <member name="M:MomentSharp.Manipulate.EndOf(MomentSharp.DateTimeParts)">
            <summary>
                Get the end of <paramref name="part" /> from DateTime.UtcNow. E.g. EndOf(DateTimeParts.Year)
                return a new <see cref="T:System.DateTime" /> at the end of the current year.
            </summary>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>DateTime at the end of give <paramref name="part"/></returns>
        </member>
        <member name="M:MomentSharp.Manipulate.EndOf(System.DateTime,MomentSharp.DateTimeParts)">
            <summary>
                Get the end of <paramref name="part" /> from DateTime.UtcNow. E.g. EndOf(DateTimeParts.Year)
                return a new <see cref="T:System.DateTime" /> at the end of the current year.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>DateTime at the end of give <paramref name="part"/></returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetYear(System.DateTime,System.Int32)">
            <summary>
                Set the Year of this <paramref name="dateTime" /> to <paramref name="year" />, leaving all other all other parts
                the same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="year">new year</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetMonth(System.DateTime,System.Int32,System.Boolean)">
            <summary>
                Set the Month of this <paramref name="dateTime" /> to <paramref name="month" />, leaving all other all other parts
                the same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="month">new month</param>
            <param name="bubble">If set to true, it will bubble up the next part. E.g. 90 seconds becomes 1:30 minutes</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetDay(System.DateTime,System.Int32,System.Boolean)">
            <summary>
                Set the Day of this <paramref name="dateTime" /> to <paramref name="day" />, leaving all other all other parts the
                same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="day">new day</param>
            <param name="bubble">If set to true, it will bubble up the next part. E.g. 90 seconds becomes 1:30 minutes</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetHour(System.DateTime,System.Int32,System.Boolean)">
            <summary>
                Set the Hour of this <paramref name="dateTime" /> to <paramref name="hour" />, leaving all other all other parts
                the same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="hour">new hour</param>
            <param name="bubble">If set to true, it will bubble up the next part. E.g. 90 seconds becomes 1:30 minutes</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetMinute(System.DateTime,System.Int32,System.Boolean)">
            <summary>
                Set the Minute of this <paramref name="dateTime" /> to <paramref name="minute" />, leaving all other all other parts
                the same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="minute">new minute</param>
            <param name="bubble">If set to true, it will bubble up the next part. E.g. 90 seconds becomes 1:30 minutes</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetSecond(System.DateTime,System.Int32,System.Boolean)">
            <summary>
                Set the Second of this <paramref name="dateTime" /> to <paramref name="second" />, leaving all other all other parts
                the same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="second">new second</param>
            <param name="bubble">If set to true, it will bubble up the next part. E.g. 90 seconds becomes 1:30 minutes</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Manipulate.SetMillisecond(System.DateTime,System.Int32,System.Boolean)">
            <summary>
                Set the Millisecond of this <paramref name="dateTime" /> to <paramref name="millisecond" />, leaving all other all other
                parts the same.
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="millisecond">new millisecond</param>
            <param name="bubble">If set to true, it will bubble up the next part. E.g. 90 seconds becomes 1:30 minutes</param>
            <returns>DateTime</returns>
        </member>
        <member name="T:MomentSharp.NamespaceDoc">
            <summary>
            <see cref="N:MomentSharp"/> is a helper library to bring missing DateTime functions to .Net. Based on the popular JavaScript library MomentJs
            </summary>
        </member>
        <member name="T:MomentSharp.Parse">
            <summary>
            Emulates http://momentjs.com/docs/#/parsing/
            </summary>
        </member>
        <member name="M:MomentSharp.Parse.UnixToDateTime(System.Double)">
            <summary>
                Converts javascript/Unix timestamp to DateTime
            </summary>
            <param name="unixTimeStamp">TimeStamp in seconds</param>
            <returns>DateTime in UTC</returns>
        </member>
        <member name="M:MomentSharp.Parse.UnixToDateTime(System.Int32)">
            <summary>
                Converts javascript/Unix timestamp to DateTime
            </summary>
            <param name="unixTimeStamp">TimeStamp in seconds</param>
            <returns>DateTime in UTC</returns>
        </member>
        <member name="M:MomentSharp.Parse.DateTime(MomentSharp.Moment,System.Boolean)">
            <summary>
                Convert this <paramref name="moment" /> object to a <see cref="T:System.DateTime" />
            </summary>
            <param name="moment">A Moment Object</param>
            <param name="bubble">
                Whether or not to bubble <paramref name="moment" /> to the next part. E.g. 90 seconds to 1 minute and 30 seconds.
                If false, will throw exception given the example.
            </param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Parse.LocalTime(MomentSharp.Moment)">
            <summary>
            Convert this <paramref name="moment" /> object to LocalTime <see cref="T:System.DateTime" />
            </summary>
            <param name="moment">A Moment Object</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MomentSharp.Parse.Moment(System.DateTime)">
            <summary>
                Converts this <paramref name="dateTime" /> to a <see cref="M:MomentSharp.Parse.Moment(System.DateTime)" /> object
            </summary>
            <param name="dateTime">this DateTime</param>
            <returns><see cref="M:MomentSharp.Parse.Moment(System.DateTime)"/></returns>
        </member>
        <member name="M:MomentSharp.Parse.ToUTC(System.DateTime,System.String)">
            <summary>
                Converts this <paramref name="dateTime" /> to UTC
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="fromTimeZoneId">For valid parameters see TimeZoneInfo.GetSystemTimeZones()</param>
            <returns><see cref="M:MomentSharp.Parse.DateTime(MomentSharp.Moment,System.Boolean)"/></returns>
        </member>
        <member name="M:MomentSharp.Parse.ToTimeZone(System.DateTime,System.String)">
            <summary>
                Converts this <paramref name="dateTime" /> UTC time to another time zone
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="toTimeZoneId">For valid parameters see TimeZoneInfo.GetSystemTimeZones()</param>
            <returns><see cref="M:MomentSharp.Parse.DateTime(MomentSharp.Moment,System.Boolean)"/></returns>
        </member>
        <member name="T:MomentSharp.Query">
            <summary>
            Emulates http://momentjs.com/docs/#/query/
            </summary>
        </member>
        <member name="M:MomentSharp.Query.IsBefore(System.DateTime,System.DateTime,MomentSharp.DateTimeParts)">
            <summary>
                Check if this DateTime is before <paramref name="compareDateTime"></paramref>, optionally at
                <paramref name="part"></paramref>
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="compareDateTime">Compare Date</param>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>boolean</returns>
            <example>10/20/2010 isBefore 12/31/2010, DateTimeParts.Year = false</example>
            <example>10/20/2010 isBefore 01/01/2011, DateTimeParts.Year = true</example>
        </member>
        <member name="M:MomentSharp.Query.IsAfter(System.DateTime,System.DateTime,MomentSharp.DateTimeParts)">
            <summary>
                Check if this DateTime is after <paramref name="compareDateTime"></paramref>, optionally at
                <paramref name="part"></paramref>
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="compareDateTime">date to compare</param>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>boolean</returns>
        </member>
        <member name="M:MomentSharp.Query.IsSame(System.DateTime,System.DateTime,MomentSharp.DateTimeParts)">
            <summary>
                Check if this DateTime is the same as <paramref name="compareDateTime"></paramref>, optionally at
                <paramref name="part"></paramref>
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="compareDateTime">date to compare</param>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>boolean</returns>
        </member>
        <member name="M:MomentSharp.Query.IsBetween(System.DateTime,System.DateTime,System.DateTime,MomentSharp.DateTimeParts)">
            <summary>
                Check if this DateTime is between <paramref name="fromDate"></paramref> and <paramref name="toDate"></paramref>,
                optionally at <paramref name="part"></paramref>
            </summary>
            <param name="dateTime">this DateTime</param>
            <param name="fromDate">Start Date</param>
            <param name="toDate">End Date</param>
            <param name="part"><see cref="T:MomentSharp.DateTimeParts"/></param>
            <returns>boolean</returns>
        </member>
    </members>
</doc>
